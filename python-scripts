--------------------------------------
x, y, z = "Orange", "Banana", "Cherry"
--------------------------------------
Types in python :

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview

x = list(("apple", "banana", "cherry"))

x = bytes(5)
b'\x00\x00\x00\x00\x00'
x = bytearray(5)
x = memoryview(bytes(5))
--------------------------------------
z = -87.7e100
--------------------------------------
#convert to string
s = str(x)

#convert from int to float:
a = float(x)

#convert from float to int:
b = int(y)

#convert string to bytes
a = "abcd".encode()
a.decode()
--------------------------------------
import random
print(random.randrange(1,10))
--------------------------------------
Print
age,a1,a2 = 36,10,11
txt = "My name is John, and I am {} {} {}".format(age,a1,a2)

quantity = 3
itemno = 567
price = 49.95
#to make sure they place in right index
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))

--------------------------------------
Strings
txt = "The rain in Spain stays mainly in the plain"
x = "ain" in txt

#print hex value
print("xcv\x48")

#print octal
txt = "\110\145\154\154\157"
print(txt)

capitalize()  	Converts the first character to upper case
casefold()	    Converts string into lower case
center()	      Returns a centered string
count()	        Returns the number of times a specified value occurs in a string
encode()	      Returns an encoded version of the string
endswith()	    Returns true if the string ends with the specified value
expandtabs()  	Sets the tab size of the string
find()	        Searches the string for a specified value and returns the position of where it was found
format()	      Formats specified values in a string
format_map()	  Formats specified values in a string
index()	        Searches the string for a specified value and returns the position of where it was found
isalnum()	      Returns True if all characters in the string are alphanumeric
isalpha()	      Returns True if all characters in the string are in the alphabet
isdecimal()	    Returns True if all characters in the string are decimals
isdigit()	      Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	      Returns True if all characters in the string are lower case
isnumeric()	    Returns True if all characters in the string are numeric
isprintable()	  Returns True if all characters in the string are printable
isspace()	      Returns True if all characters in the string are whitespaces
istitle()	      Returns True if the string follows the rules of a title
isupper()	      Returns True if all characters in the string are upper case
join()	        Joins the elements of an iterable to the end of the string
ljust()	        Returns a left justified version of the string
lower()	        Converts a string into lower case
lstrip()	      Returns a left trim version of the string
maketrans()	    Returns a translation table to be used in translations
partition()	    Returns a tuple where the string is parted into three parts
replace()	      Returns a string where a specified value is replaced with a specified value
rfind()	        Searches the string for a specified value and returns the last position of where it was found
rindex()	      Searches the string for a specified value and returns the last position of where it was found
rjust()	        Returns a right justified version of the string
rpartition()	  Returns a tuple where the string is parted into three parts
rsplit()	      Splits the string at the specified separator, and returns a list
rstrip()	      Returns a right trim version of the string
split()	        Splits the string at the specified separator, and returns a list
splitlines()	  Splits the string at line breaks and returns a list
startswith()	  Returns true if the string starts with the specified value
strip()	        Returns a trimmed version of the string
swapcase()	    Swaps cases, lower case becomes upper case and vice versa
title()	        Converts the first character of each word to upper case
translate()	    Returns a translated string
upper()	        Converts a string into upper case
zfill()	        Fills the string with a specified number of 0 values at the beginning
--------------------------------------
x = 200
print(isinstance(x, int))

x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is z)
# returns True because z is the same object as x

print(x is y)
# returns False because x is not the same object as y, even if they have the same content

print(x == y)
# to demonstrate the difference betweeen "is" and "==": this comparison returns True because x is equal to y

z.append("aaa")
x.append("bbb")
print(x)
print(z)
print(id(x))
print(id(y))
print(id(z))

a =1
b=2
a = b
b +=1
print(a)
print(b)
--------------------------------------
List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered and unindexed. No duplicate members.
Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.

List:
append()	Adds an element at the end of the list
clear()	Removes all the elements from the list
copy()	Returns a copy of the list
count()	Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()	Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()	Sorts the list

thistuple = ("apple", "banana", "cherry")
thislist = ["apple", "banana", "cherry"]
thisset = {"apple", "banana", "cherry"}
thisdict = {"brand": "Ford","model": "Mustang","year": 1964}

thistuple = tuple(("apple", "banana", "cherry"))
thislist = list(("apple", "banana", "cherry"))
thisset = set(("apple", "banana", "cherry"))
thisdict = dict(brand="Ford", model="Mustang", year=1964)

One of the most powerful components of sorted() is the keyword argument called key. 
This argument expects a function to be passed to it, 
and that function will be used on each value in the list being sorted to determine the resulting order.
>>> words = ['banana', 'pie', 'Washington', 'book']
>>> sorted(words, key=len)
['pie', 'book', 'banana', 'Washington']

lambda functions are also useful when you need to sort class objects based on a property.
If you have a group of students and need to sort them by their final grade, highest to lowest,
then a lambda can be used to get the grade property from the class:
>>> from collections import namedtuple

>>> StudentFinal = namedtuple('StudentFinal', 'name grade')
>>> bill = StudentFinal('Bill', 90)
>>> patty = StudentFinal('Patty', 94)
>>> bart = StudentFinal('Bart', 89)
>>> students = [bill, patty, bart]
>>> sorted(students, key=lambda x: getattr(x, 'grade'), reverse=True)
[StudentFinal(name='Patty', grade=94), StudentFinal(name='Bill', grade=90), StudentFinal(name='Bart', grade=89)]

Sort in order
>>>sorted(list1,key=lambda x: (x[1],x[2],x[0])
#[(5, 3, 2), (2, 3, 4), (3, 4, 5)]

If you don't want to use lambda you can use itemgetter.

from operator import itemgetter
sorted(list1,key=itemgetter(1,2,0))
#[(5, 3, 2), (2, 3, 4), (3, 4, 5)]
--------------------------------------
#nothing to do
if b > a:
  pass
  
continue
break
while
for

#when the for completes then do else!!
for x in range(6):
  print(x)
else:
  print("Finally finished!")
  
--------------------------------------
Python Function:
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")

def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")

#Use lambda functions when an anonymous function is required for a short period of time.
x = lambda a : a + 10
print(x(5))

def myfunc(n):
  return lambda a : a * n
mydoubler = myfunc(2)
print(mydoubler(11)) #22
--------------------------------------
#Class
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

#Python Inheritance
#Note: The child's __init__() function overrides the inheritance of the parent's __init__() function.

#To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function:
class Student(Person):
  def __init__(self, fname, lname):
    Person.__init__(self, fname, lname)
    
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
-------------------------------------- 
Technically, in Python, an iterator is an object which implements the iterator protocol, 
which consist of the methods __iter__() and __next__().
Lists, tuples, dictionaries, and sets are all iterable objects. 
They are iterable containers which you can get an iterator from.
All these objects have a iter() method which is used to get an iterator:

mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))
--------------------------------------
#Modules
import mymodule
mymodule.greeting("Jonathan")

import mymodule as mx
a = mx.person1["age"]
print(a)

#List all the defined names belonging to the platform module:
import platform
x = dir(platform)
print(x)
--------------------------------------
import datetime
x = datetime.datetime.now()
print(x.year)
print(x.strftime("%A"))

%a	Weekday, short version	Wed	
%A	Weekday, full version	Wednesday	
%w	Weekday as a number 0-6, 0 is Sunday	3	
%d	Day of month 01-31	31	
%b	Month name, short version	Dec	
%B	Month name, full version	December	
%m	Month as a number 01-12	12	
%y	Year, short version, without century	18	
%Y	Year, full version	2018	
%H	Hour 00-23	17	
%I	Hour 00-12	05	
%p	AM/PM	PM	
%M	Minute 00-59	41	
%S	Second 00-59	08	
%f	Microsecond 000000-999999	548513	
%z	UTC offset	+0100	
%Z	Timezone	CST	
%j	Day number of year 001-366	365	
%U	Week number of year, Sunday as the first day of week, 00-53	52	
%W	Week number of year, Monday as the first day of week, 00-53	52	
%c	Local version of date and time	Mon Dec 31 17:41:00 2018	
%x	Local version of date	12/31/18	
%X	Local version of time	17:41:00	
%%	A % character	%
--------------------------------------
try-except
try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")
  
#if no error
try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")
  
#executed regardless if the try block raises an error or not.
try:
  f = open("demofile.txt")
  f.write("Lorum Ipsum")
except:
  print("Something went wrong when writing to the file")
finally:
  f.close()
  
  raise TypeError("Only integers are allowed")
