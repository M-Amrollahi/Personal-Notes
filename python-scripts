--------------------------------------
x, y, z = "Orange", "Banana", "Cherry"
--------------------------------------
Types in python :

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview

x = list(("apple", "banana", "cherry"))

x = bytes(5)
b'\x00\x00\x00\x00\x00'
x = bytearray(5)
x = memoryview(bytes(5))
--------------------------------------
z = -87.7e100
--------------------------------------
#convert to string
s = str(x)

#convert from int to float:
a = float(x)

#convert from float to int:
b = int(y)

#convert string to bytes
a = "abcd".encode()
a.decode()
--------------------------------------
import random
print(random.randrange(1,10))
--------------------------------------
Strings
txt = "The rain in Spain stays mainly in the plain"
x = "ain" in txt

age,a1,a2 = 36,10,11
txt = "My name is John, and I am {} {} {}".format(age,a1,a2)

quantity = 3
itemno = 567
price = 49.95
#to make sure they place in right index
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))

#print hex value
print("xcv\x48")

#print octal
txt = "\110\145\154\154\157"
print(txt)

capitalize()  	Converts the first character to upper case
casefold()	    Converts string into lower case
center()	      Returns a centered string
count()	        Returns the number of times a specified value occurs in a string
encode()	      Returns an encoded version of the string
endswith()	    Returns true if the string ends with the specified value
expandtabs()  	Sets the tab size of the string
find()	        Searches the string for a specified value and returns the position of where it was found
format()	      Formats specified values in a string
format_map()	  Formats specified values in a string
index()	        Searches the string for a specified value and returns the position of where it was found
isalnum()	      Returns True if all characters in the string are alphanumeric
isalpha()	      Returns True if all characters in the string are in the alphabet
isdecimal()	    Returns True if all characters in the string are decimals
isdigit()	      Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	      Returns True if all characters in the string are lower case
isnumeric()	    Returns True if all characters in the string are numeric
isprintable()	  Returns True if all characters in the string are printable
isspace()	      Returns True if all characters in the string are whitespaces
istitle()	      Returns True if the string follows the rules of a title
isupper()	      Returns True if all characters in the string are upper case
join()	        Joins the elements of an iterable to the end of the string
ljust()	        Returns a left justified version of the string
lower()	        Converts a string into lower case
lstrip()	      Returns a left trim version of the string
maketrans()	    Returns a translation table to be used in translations
partition()	    Returns a tuple where the string is parted into three parts
replace()	      Returns a string where a specified value is replaced with a specified value
rfind()	        Searches the string for a specified value and returns the last position of where it was found
rindex()	      Searches the string for a specified value and returns the last position of where it was found
rjust()	        Returns a right justified version of the string
rpartition()	  Returns a tuple where the string is parted into three parts
rsplit()	      Splits the string at the specified separator, and returns a list
rstrip()	      Returns a right trim version of the string
split()	        Splits the string at the specified separator, and returns a list
splitlines()	  Splits the string at line breaks and returns a list
startswith()	  Returns true if the string starts with the specified value
strip()	        Returns a trimmed version of the string
swapcase()	    Swaps cases, lower case becomes upper case and vice versa
title()	        Converts the first character of each word to upper case
translate()	    Returns a translated string
upper()	        Converts a string into upper case
zfill()	        Fills the string with a specified number of 0 values at the beginning
--------------------------------------
x = 200
print(isinstance(x, int))

x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is z)
# returns True because z is the same object as x

print(x is y)
# returns False because x is not the same object as y, even if they have the same content

print(x == y)
# to demonstrate the difference betweeen "is" and "==": this comparison returns True because x is equal to y

z.append("aaa")
x.append("bbb")
print(x)
print(z)
print(id(x))
print(id(y))
print(id(z))

a =1
b=2
a = b
b +=1
print(a)
print(b)
--------------------------------------
List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered and unindexed. No duplicate members.
Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.

append()	Adds an element at the end of the list
clear()	Removes all the elements from the list
copy()	Returns a copy of the list
count()	Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()	Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()	Sorts the list

thistuple = ("apple", "banana", "cherry")
thislist = ["apple", "banana", "cherry"]
thisset = {"apple", "banana", "cherry"}
thisdict = {"brand": "Ford","model": "Mustang","year": 1964}

thistuple = tuple(("apple", "banana", "cherry"))
thislist = list(("apple", "banana", "cherry"))
thisset = set(("apple", "banana", "cherry"))
thisdict = dict(brand="Ford", model="Mustang", year=1964)
--------------------------------------
#nothing to do
if b > a:
  pass
  
continue
break
while
for

#when the for completes then do else!!
for x in range(6):
  print(x)
else:
  print("Finally finished!")
  
--------------------------------------
Python Function:
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")

def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")

#Use lambda functions when an anonymous function is required for a short period of time.
x = lambda a : a + 10
print(x(5))
