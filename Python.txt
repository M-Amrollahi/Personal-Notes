--------------------------------------
x, y, z = "Orange", "Banana", "Cherry"
--------------------------------------
Types in python :

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview

x = list(("apple", "banana", "cherry"))

x = bytes(5)
b'\x00\x00\x00\x00\x00'
x = bytearray(5)
x = memoryview(bytes(5))
----------------------------------------------------------------------------
z = -87.7e100
----------------------------------------------------------------------------
#Built-in functions

bin(x)
Convert an integer number to a binary string prefixed with “0b”
bin(3)
'0b11'
f'{14:#b}', f'{14:b}'
('0b1110', '1110')

breakpoint(*args, **kws)
This function drops you into the debugger at the call site. Can use same as IDE with Pdb


bytearray("\x70","ascii") #bytearray(b"p")
bytearray("اب","utf-8") #bytearray(b'\xd8\xa7\xd8\xa8')

bytearray(3)


callable(object)


dir([object])
Without arguments, return the list of names in the current local scope. 
With an argument, attempt to return a list of valid attributes for that object.

c,d = divmod(a, b)


seasons = ['Spring', 'Summer', 'Fall', 'Winter']
list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]


hex(x)
'%#x' % 255, '%x' % 255, '%X' % 255
('0xff', 'ff', 'FF')
format(255, '#x'), format(255, 'x'), format(255, 'X')
('0xff', 'ff', 'FF')
f'{255:#x}', f'{255:x}', f'{255:X}'
('0xff', 'ff', 'FF')

class int(x, base=10)
int("1001",2)
9

a = iter(object[, sentinel])
a.__next__()

locals() globals()

min(iter) max(iter)

next(iterator[, default])

reversed(seq)
Return a reverse iterator. 


class str(object='')
class str(object=b'', encoding='utf-8', errors='strict')
--------------------------------------
#convert ascii to string
chr(97)
'a'

#convert char to asci code
>>> ord("a")
97

#convert to string
s = str(x)

#convert from int to float:
a = float(x)

#convert from float to int:
b = int(y)

#convert string to bytes
a = "abcd".encode()
a.decode()
--------------------------------------
import random
print(random.randrange(1,10))
--------------------------------------
Print
age,a1,a2 = 36,10,11
txt = "My name is John, and I am {} {} {}".format(age,a1,a2)

quantity = 3
itemno = 567
price = 49.95
#to make sure they place in right index
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))


#print options
#Padding and aligning strings
'{:>10}'.format('test')
      test
      
'{:10}'.format('test')
test      

'{:_<10}'.format('test')
test______

'{:^10}'.format('test')
   test   
   
'{:.5}'.format('xylophone')
xylop

'{:10.5}'.format('xylophone')
xylop     

'{:f}'.format(3.141592653589793)
3.141593

'{:4d}'.format(42)
  42
  
'{:06.2f}'.format(3.141592653589793)
003.14

'{:04d}'.format(42)
0042

data = {'first': 'Hodor', 'last': 'Hodor!'}
'{first} {last}'.format(**data)
Hodor Hodor!

#Thousand seperator
print(f"The value of the company is {355555:,d}")
The value of the company is 355,555
--------------------------------------
Strings
txt = "The rain in Spain stays mainly in the plain"
x = "ain" in txt

#print hex value
print("xcv\x48")

#print octal
txt = "\110\145\154\154\157"
print(txt)


txt = "Hi Sam!";
x = "mSa";
y = "eJo";
mytable = txt.maketrans(x, y);
print(txt.translate(mytable));


capitalize()	  	Converts the first character to upper case
casefold()    		Converts string into lower case
center()	      	Returns a centered string
count()	        	Returns the number of times a specified value occurs in a string
encode()	     	Returns an encoded version of the string
endswith()	    	Returns true if the string ends with the specified value
expandtabs()  		Sets the tab size of the string
find()	        	Searches the string for a specified value and returns the position of where it was found
format()	      	Formats specified values in a string
format_map()	  	Formats specified values in a string
index()	        	Searches the string for a specified value and returns the position of where it was found
isalnum()	      	Returns True if all characters in the string are alphanumeric
isalpha()	      	Returns True if all characters in the string are in the alphabet
isdecimal()	    	Returns True if all characters in the string are decimals
isdigit()	      	Returns True if all characters in the string are digits
isidentifier()		Returns True if the string is an identifier
islower()	      	Returns True if all characters in the string are lower case
isnumeric()	    	Returns True if all characters in the string are numeric
isprintable()	  	Returns True if all characters in the string are printable
isspace()	      	Returns True if all characters in the string are whitespaces
istitle()	      	Returns True if the string follows the rules of a title
isupper()	      	Returns True if all characters in the string are upper case
join()	        	Joins the elements of an iterable to the end of the string
ljust()	        	Returns a left justified version of the string
lower()	        	Converts a string into lower case
lstrip()	      	Returns a left trim version of the string
maketrans()	    	Returns a translation table to be used in translations
partition()	    	Returns a tuple where the string is parted into three parts
replace()	      	Returns a string where a specified value is replaced with a specified value
rfind()	        	Searches the string for a specified value and returns the last position of where it was found
rindex()	      	Searches the string for a specified value and returns the last position of where it was found
rjust()	        	Returns a right justified version of the string
rpartition()	  	Returns a tuple where the string is parted into three parts
rsplit()	      	Splits the string at the specified separator, and returns a list
rstrip()	      	Returns a right trim version of the string
split()	        	Splits the string at the specified separator, and returns a list
splitlines()	  	Splits the string at line breaks and returns a list
startswith()	  	Returns true if the string starts with the specified value
strip()	        	Returns a trimmed version of the string
swapcase()	    	Swaps cases, lower case becomes upper case and vice versa
title()	        	Converts the first character of each word to upper case
translate()	    	Returns a translated string
upper()	        	Converts a string into upper case
zfill()	        	Fills the string with a specified number of 0 values at the beginning
----------------------------------------------------------------------------

x = 200
print(isinstance(x, int))

x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is z)
# returns True because z is the same object as x

print(x is y)
# returns False because x is not the same object as y, even if they have the same content

print(x == y)
# to demonstrate the difference betweeen "is" and "==": this comparison returns True because x is equal to y

z.append("aaa")
x.append("bbb")
print(x)
print(z)
print(id(x))
print(id(y))
print(id(z))

a =1
b=2
a = b
b +=1
print(a)
print(b)
----------------------------------------------------------------------------
List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered and unindexed. No duplicate members.
Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.

List:
append()	Adds an element at the end of the list
clear()		Removes all the elements from the list
copy()		Returns a copy of the list
count()		Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()		Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()		Sorts the list

Dictionary:
clear()	  	Removes all the elements from the dictionary
copy()  	Returns a copy of the dictionary
fromkeys()	Returns a dictionary with the specified keys and value
get() 	  	Returns the value of the specified key
items() 	Returns a list containing a tuple for each key value pair
keys()  	Returns a list containing the dictionary's keys
pop()	       	Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()  	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary

# dictionary with mixed keys
my_dict = {'name': 'John', 1: [2, 4, 3]}
# using dict()
my_dict = dict({1:'apple', 2:'ball'})
# from sequence having each item as a pair
my_dict = dict([(1,'apple'), (2,'ball')])



thistuple = ("apple", "banana", "cherry")
thislist = ["apple", "banana", "cherry"]
thisset = {"apple", "banana", "cherry"}
thisdict = {"brand": "Ford","model": "Mustang","year": 1964}

thistuple = tuple(("apple", "banana", "cherry"))
thislist = list(("apple", "banana", "cherry"))
thisset = set(("apple", "banana", "cherry"))
thisdict = dict(brand="Ford", model="Mustang", year=1964)

#Dictionary key not exist
if str_t not in dict_moviTypes:
  dict_moviTypes[str_t] = 0
               
One of the most powerful components of sorted() is the keyword argument called key. 
This argument expects a function to be passed to it, 
and that function will be used on each value in the list being sorted to determine the resulting order.
>>> words = ['banana', 'pie', 'Washington', 'book']
>>> sorted(words, key=len)
['pie', 'book', 'banana', 'Washington']

>>> list(range(-5, 5))
[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]


#usefull itertools : https://docs.python.org/3/library/itertools.html#module-itertools


#Astericks operator *
def sum(a, b):
    return a + b
values = (1, 2)
#unpack withoud name
s = sum(*values)
values = { 'a': 1, 'b': 2 }
#unpack with name
s = sum(**values)
----------------------------------------------------------------------------
Technically, in Python, an iterator is an object which implements the iterator protocol, 
which consist of the methods __iter__() and __next__().
Lists, tuples, dictionaries, and sets are all iterable objects. 
They are iterable containers which you can get an iterator from.
All these objects have a iter() method which is used to get an iterator:

mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))

----------------------------------------------------------------------------
lambda functions are also useful when you need to sort class objects based on a property.
If you have a group of students and need to sort them by their final grade, highest to lowest,
then a lambda can be used to get the grade property from the class:

(lambda x: x + 1)(2)

>>> full_name = lambda first, last: f'Full name: {first.title()} {last.title()}'
>>> full_name('guido', 'van rossum')


>>> from collections import namedtuple
>>> StudentFinal = namedtuple('StudentFinal', 'name grade')
>>> bill = StudentFinal('Bill', 90)
>>> patty = StudentFinal('Patty', 94)
>>> bart = StudentFinal('Bart', 89)
>>> students = [bill, patty, bart]
>>> sorted(students, key=lambda x: getattr(x, 'grade'), reverse=True)
[StudentFinal(name='Patty', grade=94), StudentFinal(name='Bill', grade=90), StudentFinal(name='Bart', grade=89)]

Sort in order
>>>sorted(list1,key=lambda x: (x[1],x[2],x[0])
#[(5, 3, 2), (2, 3, 4), (3, 4, 5)]

If you don't want to use lambda you can use itemgetter.

from operator import itemgetter
sorted(list1,key=itemgetter(1,2,0))
#[(5, 3, 2), (2, 3, 4), (3, 4, 5)]

#sort heap
from heapq import nsmallest
nsmallest(4,numbers)

*do nothing
lambda *args: None
----------------------------------------------------------------------------
Map 
map() function returns a map object(which is an iterator) of the results after applying the given function to each item of a given iterable (list, tuple etc.)
Syntax :
map(fun, iter)
# Double all numbers using map and lambda 
numbers = (1, 2, 3, 4) 
result = map(lambda x: x + x, numbers) 
print(list(result)) 
---
l = ['sat', 'bat', 'cat', 'mat']
list(map(list, l)) 
[['s', 'a', 't'], ['b', 'a', 't'], ['c', 'a', 't'], ['m', 'a', 't']]
---
#cread 2d matrix with  r row c column
# Using list comprehension for input 
matrix = [[int(input()) for x in range (C)] for y in range(R)]

Filter
The filter() method filters the given sequence with the help of a function that tests each element in the sequence to be true or not.
# a list contains both even and odd numbers.  
seq = [0, 1, 2, 3, 5, 8, 13]   
# result contains odd numbers of the list 
result = filter(lambda x: x % 2, seq) 
print(list(result)) 


#reduce
# python code to demonstrate working of reduce() 
# importing functools for reduce() 
import functools 
# initializing list 
lis = [ 1 , 3, 5, 6, 2, ] 
# using reduce to compute sum of list 
print ("The sum of the list elements is : ",end="") 
print (functools.reduce(lambda a,b : a+b,lis)) 
# using reduce to compute maximum element from list 
print ("The maximum element of the list is : ",end="") 
print (functools.reduce(lambda a,b : a if a > b else b,lis))


# importing functools for reduce() 
import functools 
# importing operator for operator functions 
import operator 
# initializing list 
lis = [ 1 , 3, 5, 6, 2, ] 
# using reduce to compute sum of list 
# using operator functions 
print ("The sum of the list elements is : ",end="") 
print (functools.reduce(operator.add,lis)) 
# using reduce to compute product 
# using operator functions 
print ("The product of list elements is : ",end="") 
print (functools.reduce(operator.mul,lis)) 
# using reduce to concatenate string 
print ("The concatenated product is : ",end="") 
print (functools.reduce(operator.add,["geeks","for","geeks"])) 


----------------------------------------------------------------------------
#nothing to do
if b > a:
  pass
  
continue
break
while
for


######The else clause won’t be executed if the list is broken out of with a break statement (ONLY AFTER LOOP FINISH):
#when the for completes then do else!!
for x in range(6):
  print(x)
else:
  print("Finally finished!")
  
for n in range(2, 15):
    for m in range(2, n):
        if n % m == 0:
            print(f'{n} is not a prime')
            break
    else: 
        print(f'{n} is a prime*****')
  
#one-line for
evenNumbers =[x for x in range(11) if x % 2 == 0]

 odds = [x for x in int if x%2!=0]
  
--------------------------------------
Python Function:
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")

def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")

#Use lambda functions when an anonymous function is required for a short period of time.
x = lambda a : a + 10
print(x(5))

def myfunc(n):
  return lambda a : a * n
mydoubler = myfunc(2)
print(mydoubler(11)) #22
--------------------------------------
#Class
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

#Python Inheritance
#Note: The child's __init__() function overrides the inheritance of the parent's __init__() function.

#To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function:
class Student(Person):
  def __init__(self, fname, lname):
    Person.__init__(self, fname, lname)
    
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)

--------------------------------------
#Modules
import mymodule
mymodule.greeting("Jonathan")

import mymodule as mx
a = mx.person1["age"]
print(a)

#List all the defined names belonging to the platform module:
import platform
x = dir(platform)
print(x)
--------------------------------------
import datetime
x = datetime.datetime.now()
print(x.year)
print(x.strftime("%A"))

%a	Weekday, short version	Wed	
%A	Weekday, full version	Wednesday	
%w	Weekday as a number 0-6, 0 is Sunday	3	
%d	Day of month 01-31	31	
%b	Month name, short version	Dec	
%B	Month name, full version	December	
%m	Month as a number 01-12	12	
%y	Year, short version, without century	18	
%Y	Year, full version	2018	
%H	Hour 00-23	17	
%I	Hour 00-12	05	
%p	AM/PM	PM	
%M	Minute 00-59	41	
%S	Second 00-59	08	
%f	Microsecond 000000-999999	548513	
%z	UTC offset	+0100	
%Z	Timezone	CST	
%j	Day number of year 001-366	365	
%U	Week number of year, Sunday as the first day of week, 00-53	52	
%W	Week number of year, Monday as the first day of week, 00-53	52	
%c	Local version of date and time	Mon Dec 31 17:41:00 2018	
%x	Local version of date	12/31/18	
%X	Local version of time	17:41:00	
%%	A % character	%
--------------------------------------
try-except
try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")
  
#if no error
try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")
  
#executed regardless if the try block raises an error or not.
try:
  f = open("demofile.txt")
  f.write("Lorum Ipsum")
except:
  print("Something went wrong when writing to the file")
finally:
  f.close()
  
  raise TypeError("Only integers are allowed")
  
  #create new virtual environment
  python3 -m venv ./envv
  source envv/bin/activate
  
----------------------------------------------
Python special variables:
  
__name__ defines the namespace that a Python module is running in. When Python is run, it will replace __name__ with it's namespace.
__doc__ will print out the docstring that appears in a class or method. A docstring is a string comment and is the first line after the class or method header
__getattr__ is a method that you can write into your classes that specifies how Python reacts when it can't find a called variable or method. __getattr__ takes the name of what it's looking for as a parameter. It can be used in the singleton pattern to redirect the called variable to the inner class or it can be used to raise exceptions

class ATest:
    class_wide_var=0
    def __init__(self):
        self.x=5
        self.y=7
        self.z=10
        ATest.class_wide_var+=1
     
    def add(self,num1,num2):
        return num1+num2
    def __getattr__(self,name):
        print "Not Found"
	raise BadValueException

a=ATest()
x=a.novar

_setattr__ and setattr work in the same way as their corresponding "get" methods above:

__class__ returns the class an instance is
__bases__ is a variable that contains as a tuple all the classes that a class inherites from
__subclasses__ Similar to above, __subclasses__ is a method that will return all the subclasses of a class in a list:
dir() is a method that will return, as a list, every associated method or attribute. It can be run on an instance, a class, a list, and others
locals is a native method that displays all the local variables as dictionary entries. globals does the same with global variables
Similar to locals(), __dict__ will return, as a dictionary, all attributes of a class instance
----------------------------------------------

Pytest

def sum(num1, num2):
    """It returns sum of two numbers"""
    return num1 + num2
    
import pytest
#make sure to start function name with test
def test_sum():
    assert sum(1, 2) == 3
    
@pytest.mark.parametrize('num1, num2, expected', [(3,5,8)])
def test_sum(num1, num2, expected):
        assert sum(num1, num2) == expected
    
Terminal : pytest test_example.py

--------------------------------------------------------------------------------------------
from sys import getsizeof
getsizeof(response) # report in bytes
--------------------------------------------------------------------------------------------
#python requests library
#Best practice website : https://httpbin.org/

response = requests.get("https://api.github.com")

response.status_code


response.content # get the raw data in bytes
response.text # guess the encoding based on the response’s headers
response.json()

response.headers
response.headers["Content-Type"] #case insative

response = requests.get(
    'https://api.github.com/search/repositories',
    params={'q': 'requests+language:python'},
) # Query strings are useful for parameterizing GET requests

#edit the request header
response = requests.get(
    'https://api.github.com/search/repositories',
    params={'q': 'requests+language:python'},
    headers={'Accept': 'application/vnd.github.v3.text-match+json'},
)


#other methods
requests.post('https://httpbin.org/post', data={'key':'value'})
requests.put('https://httpbin.org/put', data={'key':'value'})
requests.delete('https://httpbin.org/delete')
requests.head('https://httpbin.org/get')
requests.patch('https://httpbin.org/patch', data={'key':'value'})
requests.options('https://httpbin.org/get')

#Basic access authentication(HTTP)
For example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the Base64 encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. Then the Authorization header will appear as:

Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

from requests.auth import HTTPBasicAuth
from getpass import getpass
requests.get(
    'https://api.github.com/user',
    auth=HTTPBasicAuth('username', getpass())
)

import requests
from getpass import getpass

# By using a context manager, you can ensure the resources used by
# the session will be released after use
with requests.Session() as session:
    session.auth = ('username', getpass())

    # Instead of requests.get(), you'll use session.get()
    response = session.get('https://api.github.com/user')

# You can inspect the response just like you did before
print(response.headers)
print(response.json())

--------------------------------------------------------------------------------------------
##### _
in the interactive interpreter, the single underscore (_) is bound to the last expression evaluated.
--------------------------------------------------------------------------------------------

#You can return the lambda like as an object, with predifined argument.
#in this example, y can have value, but next we can pass x to lambda
def plus(y): return lambda x: x+y

#eg:
id_ = lambda x: x
number = lambda x: lambda f=id_: f(x)
zero, one, two, three, four, five, six, seven, eight, nine = map(number, range(10))
plus = lambda x: lambda y: y + x
minus = lambda x: lambda y: y - x
times = lambda x: lambda y: y * x
divided_by = lambda x: lambda y: y / x

seven(times(five()))



# Python program to demonstrate 
# nested lambda functions 
square = lambda x: x**2
product = lambda f, n: lambda x: f(x)*n 
  
ans = product(square, 2)(10) 
print(ans) 



#Nested function - closure
def has_permission(page):
    def inner(username):
        if username == 'Admin':
            return "'{0}' does have access to {1}.".format(username, page)
        else:
            return "'{0}' does NOT have access to {1}.".format(username, page)
    return inner
current_user = has_permission('Admin Area')
print(current_user('Admin'))
random_user = has_permission('Admin Area')
print(random_user('Not Admin'))
--------------------------------------------------------------------------------------------

eval("2+3")
exec("print(x)")

--------------------------------------------------------------------------------------------

class add(int):
    def __call__(self,n):
        return add(self+n)

print(add(9)(2)(3)) ### 9+2+3=14

--------------------------------------------------------------------------------------------
from collections import Counter

def solve(a):
    c = Counter(a)
    return sorted(a, key=lambda k: (-c[k], k))
    
def solve(arr):
    return sorted(arr, key= lambda x: (-arr.count(x), x))
    
solve([2,3,5,3,7,9,5,3,7]) = [3,3,3,5,5,7,7,2,9]
--------------------------------------------------------------------------------------------
@property

#1
class Celsius:
    def __init__(self, temperature = 0):
        self.temperature = temperature
    def to_fahrenheit(self):
        return (self.temperature * 1.8) + 32
	
#2	
# Making Getters and Setter methods
class Celsius:
    def __init__(self, temperature=0):
        self.set_temperature(temperature)

    def to_fahrenheit(self):
        return (self.get_temperature() * 1.8) + 32

    # getter method
    def get_temperature(self):
        return self._temperature

    # setter method
    def set_temperature(self, value):
        if value < -273.15:
            raise ValueError("Temperature below -273.15 is not possible.")
        self._temperature = value


#3
# using property class
.....
    # creating a property object
    temperature = property(get_temperature, set_temperature)
    
####property(fget=None, fset=None, fdel=None, doc=None)
--------------------------------------------------------------------------------------------
PEP-8
python mangling
#https://medium.com/analytics-vidhya/python-name-mangling-and-how-to-use-underscores-e67b529f744f
When in doubt about python naming, Pep-8 is a good place to start - but quickly _var is a weak “private” or “protected” indicator, __var is used for name mangling and should generally be avoided if possible, var_ is used to avoid naming collisions with python’s keywords, __var__ is used by python’s magic methods, and finally, _ is used as a variable for assigning unused values.
--------------------------------------------------------------------------------------------
##################SciPy



Array Creation
arange, array, copy, empty, empty_like, eye, fromfile, fromfunction, identity,
linspace, logspace, mgrid, ogrid, ones, ones_like, r_, zeros, zeros_like

Conversions
ndarray.astype, atleast_1d, atleast_2d, atleast_3d, mat

Manipulations
array_split, column_stack, concatenate, diagonal, dsplit, dstack, hsplit, 
hstack, ndarray.item, newaxis, ravel, repeat, reshape, resize, squeeze, swapaxes, take, transpose, vsplit, vstack

Questions
all, any, nonzero, where

Ordering
argmax, argmin, argsort, max, min, ptp, searchsorted, sort

Operations
choose, compress, cumprod, cumsum, inner, ndarray.fill, imag, prod, put, putmask, real, sum

Basic Statistics
cov, mean, std, var

Basic Linear Algebra
cross, dot, outer, linalg.svd, vdot

Choose:			
# make a matrix with numpy 
gfg = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 			
# applying numpy.choose() method 
geeks = np.choose([2, 0, 1], gfg) 
array([7 2 6])
#####################
Masking:
In [3]: numbers
array([[ 5, 6,  8, 10, 12, 14],
       [16, 18, 20, 22, 24, 26],
       [28, 30, 32, 34, 36, 38],
       [40, 42, 44, 46, 48, 50]])

In [4]: mask = numbers % 4 == 0

In [5]: mask
Out[5]:
array([[False, False,  True, False,  True, False],
       [ True, False,  True, False,  True, False],
       [ True, False,  True, False,  True, False],
       [ True, False,  True, False,  True, False]])

In [6]: numbers[mask]
Out[6]: array([ 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48])

In [7]: by_four = numbers[numbers % 4 == 0]

In [8]: by_four
Out[8]: array([ 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48])
#############################

arr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])

##3 inner loops
for x in np.nditer(arr):
  print(x)
  
1
2
3
4
5
6
7
8
#############################
#search in array with indexes
arr = np.array([1, 2, 3, 4, 5, 4, 4])
x = np.where(arr == 4)
print(x)
(array([3, 5, 6]),)

##searchsorted assume that the array is sorted
arr = np.array([1, 3, 5, 7])
x = np.searchsorted(arr, [2, 4, 6])
print(x)
The return value is an array: [1 2 3] containing the three indexes where 2, 4, 6 would be inserted in the original array to maintain the order.
#############################
>>> a = np.arange(5)
>>> a[[0,0,2]]=[1,2,3]
>>> a
array([2, 1, 3, 3, 4])
#############################
Where if then else
np.where(a%2==0,1000,2000)

#############################

#
NumPy is capable of finding roots for polynomials and linear equations, but it can not find roots for non linear equations
#finding root
from scipy.optimize import root
from math import cos
def eqn(x):
  return x + cos(x)
myroot = root(eqn, 0)
print(myroot.x)


###minimize the function
from scipy.optimize import minimize
def eqn(x):
  return x**2 + x + 2
mymin = minimize(eqn, 0, method='BFGS')
##have callback
print(mymin)


### Statistics mean,skew,...
import numpy as np
from scipy.stats import describe
v = np.random.normal(size=100)
res = describe(v)
print(res)


#### Interpolation
from scipy.interpolate import interp1d
import numpy as np
xs = np.arange(10)
ys = 2*xs + 1
interp_func = interp1d(xs, ys)
newarr = interp_func(np.arange(2.1, 3, 0.1))
print(newarr)

--------------------------------------------------------------------------------------------
#trace in jupyter notebook
from IPython.core.debugger import set_trace
import pdb
set_trace()

%debug


Command	Description
p		Print the value of an expression.
pp		Pretty-print the value of an expression.
n		Continue execution until the next line in the current function is reached or it returns.
s		Execute the current line and stop at the first possible occasion (either in a function that is called or in the current function).
c		Continue execution and only stop when a breakpoint is encountered.
unt		Continue execution until the line with a number greater than the current one is reached. With a line number argument, continue execution until a line with a number greater or equal to that is reached.
l		List source code for the current file. Without arguments, list 11 lines around the current line or continue the previous listing.
ll		List the whole source code for the current function or frame.
b		With no arguments, list all breaks. With a line number argument, set a breakpoint at this line in the current file.
w		Print a stack trace, with the most recent frame at the bottom. An arrow indicates the current frame, which determines the context of most commands.
u		Move the current frame count (default one) levels up in the stack trace (to an older frame).
d		Move the current frame count (default one) levels down in the stack trace (to a newer frame).
h		See a list of available commands.
h <topic>	Show help for a command or topic.
h pdb	Show the full pdb documentation.
q		Quit the debugger and exit.
--------------------------------------------------------------------------------------------
https://medium.com/analytics-vidhya/polynomial-fitting-in-python-using-just-one-line-of-code-f1638a4b3678
#Simple polynimila fitting
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0,1,num=1000)

f = 1/4

sine = np.sin(2*np.pi*f*x) + np.random.normal(scale=0.1, size=len(x))
fig, ax = plt.subplots()
ax.plot(np.arange(1000), sine,)
ax.plot(np.arange(100), np.ones((100,)),"ro")

poly = np.polyfit(x, sine, deg=10)

fig, ax = plt.subplots()
ax.plot(sine, label='data')
ax.plot(np.polyval(poly, x), label='fit')
ax.legend()

--------------------------------------------------------------------------------------------
#Simple decorator
def dec_nonzero(operator):
    def inner(x,y):
        if y == 0:
            print("! ZERO Devision....")
            return
        return operator(x,y)
             
    return inner


@dec_nonzero
def f_test(x,y):
    print("running f_test...")
    return x/y

f_test(100,5)
f_test(100,0)



##logging decorator for logging each function
import time
def logging_time(func):
    """Decorator that logs time"""
    def logger():
        """Function that logs time"""
        start = time.time()
        func()
        print(f"Finishing {func.__name__}: {time.time() - start:.5f} sec")

    return logger
--------------------------------------------------------------------------------------------
##some Pro Techniques
#Multiple Inputs in One Go
a,b,c=input("Enter three inputs ").split()

#Most Repeated Object
li=[1,5,8,6,5,9,6,9,5,6,9,6,5,4,"a","a","b","b","a","a","a"]
print(max(set(li), key=li.count))

--------------------------------------------------------------------------------------------
##Disassemble the function to see the details what is happening inside
import dis
def a():
  data = [1,2,3,4,5,6,7,8]
  x = data[5]
  print(x)

def b():
  data = (1,2,3,4,5,6,7,8)
  x = data(5)
  print(x)
print("----------:List:------")
dis.dis(a)
print("----------:Tuple:------")
dis.dis(b)

--------------------------------------------------------------------------------------------
#We can use only logging for showing on stream or on file. this is about the handler
import logging

log = logging.getLogger("application")

sh = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s", "", "%")
sh.setFormatter(formatter)
log.addHandler(sh)

log.addHandler(logging.FileHandler('logging.txt'))
log.setLevel(logging.DEBUG)

log.info("Starting application")

--------------------------------------------------------------------------------------------
##Serilization in python
import pickle
dict1 = {1:2, 3:4, 5:60}

dumpfile = "testpic"
myfile = open(dumpfile,"wb")

pickle.dump(dict1,myfile)
myfile.close()

infile = open(dumpfile,'rb')
new_dict = pickle.load(infile, encoding='latin1')
infile.close()
--------------------------------------------------------------------------------------------
#we can use partial function to set some params but run them with different params
def f_test(p1,p2):
    print("{p1} , {p2}")

from functools import partial
part = partial(f_test, "Hi")
part("Mahdi")
part("Ali")
--------------------------------------------------------------------------------------------
##Package livelossplot for watching live loss diag
from livelossplot import PlotLossesKeras

model.fit(X_train, Y_train,
          epochs=10,
          validation_data=(X_test, Y_test),
          callbacks=[PlotLossesKeras()],
          verbose=0)
	 
	 
##package tensorwatch for debugging machine learning
--------------------------------------------------------------------------------------------
#check python version in python
import sys
sys.version_info
--------------------------------------------------------------------------------------------
#ipython
%env : show environment vars
%time [_ for i in range(10000)] # how much it takes to run
%whos #all vars with value and datatype
%%bash #treat the whole cell as a terminal console
%%html #treat the whole cell as html script
%%latex # treat the whole cell as latex scripts
%%markdown #cell as markdown
%who_ls #all the vars in list (#who_ls int --> all int vars)
--------------------------------------------------------------------------------------------
#since python  3.7 added (easy class)
from dataclasses import dataclass

@dataclass
class Card:
    rank: str
    suit: str

#merging two dict, the keys will iverwriten by next keys ans values
merged = { **dict1, **dict2 }

#most frequent value
test = [1, 2, 3, 4, 2, 2, 3, 1, 4, 4, 4]
print(max(set(test), key = test.count))
--------------------------------------------------------------------------------------------
#3multi process
import multiprocessing
def sleeping(s):
	pass
process1 = multiprocessing.Process(target = sleeping, args=(1,))
process2 = multiprocessing.Process(target = sleeping, args=(1,))
--------------------------------------------------------------------------------------------
#timeit
code = """
[i for i in range(100_000)]
"""       

print(timeit.timeit(stmt=code , number=100))
----------------

ns = np.linspace(100, 2000, 15, dtype=int)
ts = [timeit.timeit('insertion_sort(lst)',
                    setup='lst=list(range({})); random.shuffle(lst)'.format(n),
                    globals=globals(),
                    number=1)
         for n in ns]
plt.plot(ns, ts, 'or');
--------------------------------------------------------------------------------------------
#confusion matrix for classification
disp = metrics.plot_confusion_matrix(clf, X_test, y_test)
--------------------------------------------------------------------------------------------
#for autocomplete
%config Completer.use_jedi = False
--------------------------------------------------------------------------------------------
Python utilizes a system, which is known as “Call by Object Reference” or “Call by assignment”. In the event that you pass arguments like whole numbers, strings or tuples to a function, the passing is like call-by-value because you can not change the value of the immutable objects being passed to the function. Whereas passing mutable objects can be considered as call by reference because when their values are changed inside the function, then it will also be reflected outside the function.
Mutable: Call by reference (like list)
Immutable: Call by value (like str and int)

Binding Names to Objects:
In python, each variable to which we assign a value/container is treated as an object. When we are assigning a value to a variable, we are actually binding a name to an object.
Mutable : different ids
immutable: same id
a = "first"
b = "first"
# Returns the actual location
# where the variable is stored
print(id(a))

# Returns the actual location
# where the variable is stored
print(id(b))

# Returns true if both the variables
# are stored in same location
print(a is b)

--------------------------------------------------------------------------------------------
#make sound on jupyter notebook
import winsound
duration = 1000
freq = 440
winsound.Beep(freq, duration)

#On MAC
import os
os.system('say "Your program has now finished"'
--------------------------------------------------------------------------------------------
#define class methid and static method
class cls_A(object):
    def __init__(self , xx):
        self.x = x
    def foo(self, x):
        print(f"executing foo({self}, {x})")

    @classmethod ## create object from cls_A
    def class_foo(cls, x):
        print(f"executing class_foo({cls}, {x})")
	return cls(self , x)

    @staticmethod
    def static_foo(x):
        print(f"executing static_foo({x})")
a = A(44)
b = cls_A.class_foo(55)


when we create an object from a class, the attributes of the object will be stored in a dictionary called __dict__
__slots++ makes it expecilitly, declare the dict and then it is faster than custmon method of declaring.
class cls_t1(object):
    __slots__ = ("a" , "m")
    
    def __init__(self , x ,y):
    	self.a = x
	self.m = y
a= cls_t1()
a.m = 5

--------------------------------------------------------------------------------------------
Classes:

class Circle():
  def __init__(self, radius):
    self.radius = radius
   
  @property
  def pi(self):
    return 3.14
  def area(self):
    return self.pi * self.radius * self.radius 
  
  def perimeter(self):
    return 2 * self.pi * self.radius
    

@classmethod
def fromString(obj, s):
   day = int(s[:2])
   month = int(s[3:5])
   year = int(s[6:])
   return obj(day, month, year) # Return a new object
--------------------------------------------------------------------------------------------

Pandas:

Sort:
df.sort_values(by='col1', ascending=False, na_position='first')
df.sort_values(by=['col1', 'col2'])
df.sort_values(by='col4', key=lambda col: col.str.lower())

Types:
df.astype({'col1': 'int32'})
df.dtypes

datetime:
df['year']= df['DoB'].dt.year
df['month']= df['DoB'].dt.month
df['day']= df['DoB'].dt.day

df['week_of_year'] = df['DoB'].dt.week
df['day_of_week'] = df['DoB'].dt.dayofweek
df['is_leap_year'] = df['DoB'].dt.is_leap_year

df.loc['2018-5-2 10:30' : '2018-5-2 10:45' ]
df.between_time('10:30','10:45')


Groupby:
df.groupby(by=["author_id"])["author_id"].count().sort_values()
df.groupby(pd.Grouper(key='created_datetime', freq='1w')).count()


.open c:\sqlite\db\chinook.db
.database
ATTACH DATABASE "c:\sqlite\db\chinook.db" AS chinook;
.databases
.exit
.tables
.schema albums

--------------------------------------------------------------------------------------------
# Jupyter
Change jupyter items in new (add kernels to jupyter)
$jupyter kernelspec list
In that folder, open up file kernel.json and edit option "display_name"
--------------------------------------------------------------------------------------------

Regex
#remove hashtah amd mention
re.sub("(@[A-Za-z0-9]+)|(#[A-Za-z0-9]+)", " ")
#remove url
re.sub(r'http[s]?://\S+', '', text)
#remove punctuation:
re.sub("[\.\,\!\?\:\;\-\=]", " ", tweet)
#remove html tag
(r"<[^.]+>")
