#Save this file with *.pyx
import time
def f_test():
    print("Start")
    s = time.time()
    cdef int i
    cdef int j
    for i in range(100000000):
        j = i
    e = time.time()
    print(e-s)
    print("Finish")
 

##Save this code in a setup.py file
from setuptools import setup
from Cython.Build import cythonize
setup(
    ext_modules = cythonize("*.pyx")
)


#Run this code
python setup.py build_ext --inplace

#Run this ccode in a separate py file and then 
import [filename]
[filename].f_test()





cdef int p[1000]
cdef int x,y,z
cdef char *s
cdef float x = 5.2 (single precision)
cdef double x = 40.5 (double precision)
cdef list languages
cdef dict abc_dict
cdef object thing


##We cannot use large amount of data by default. we need to allocate memory to them
##Memory Allocation
void* malloc(size_t size)
void* realloc(void* ptr, size_t size)
void free(void* ptr)

import random
from libc.stdlib cimport malloc, free

def random_noise(int number=1):
    cdef int i
    # allocate number * sizeof(double) bytes of memory
    cdef double *my_array = <double *> malloc(number * sizeof(double))
    if not my_array:
        raise MemoryError()

    try:
        ran = random.normalvariate
        for i in range(number):
            my_array[i] = ran(0, 1)

        # ... let's just assume we do some more heavy C calculations here to make up
        # for the work that it takes to pack the C double values into Python float
        # objects below, right after throwing away the existing objects above.

        return [x for x in my_array[:number]]
    finally:
        # return the previously allocated memory to the system
        free(my_array)
